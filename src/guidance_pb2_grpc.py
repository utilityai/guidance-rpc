# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import guidance_pb2 as guidance__pb2


class GuidanceStub(object):
    """A tiny little frontend for guidance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Guide = channel.unary_stream(
                '/Guidance/Guide',
                request_serializer=guidance__pb2.GuidanceRequest.SerializeToString,
                response_deserializer=guidance__pb2.GuidanceResponse.FromString,
                )


class GuidanceServicer(object):
    """A tiny little frontend for guidance.
    """

    def Guide(self, request, context):
        """Run a guidance program.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuidanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Guide': grpc.unary_stream_rpc_method_handler(
                    servicer.Guide,
                    request_deserializer=guidance__pb2.GuidanceRequest.FromString,
                    response_serializer=guidance__pb2.GuidanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Guidance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Guidance(object):
    """A tiny little frontend for guidance.
    """

    @staticmethod
    def Guide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Guidance/Guide',
            guidance__pb2.GuidanceRequest.SerializeToString,
            guidance__pb2.GuidanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HealthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/Health/Check',
                request_serializer=guidance__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=guidance__pb2.HealthCheckResponse.FromString,
                )
        self.Watch = channel.unary_stream(
                '/Health/Watch',
                request_serializer=guidance__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=guidance__pb2.HealthCheckResponse.FromString,
                )


class HealthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=guidance__pb2.HealthCheckRequest.FromString,
                    response_serializer=guidance__pb2.HealthCheckResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=guidance__pb2.HealthCheckRequest.FromString,
                    response_serializer=guidance__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Health', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Health(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Health/Check',
            guidance__pb2.HealthCheckRequest.SerializeToString,
            guidance__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Health/Watch',
            guidance__pb2.HealthCheckRequest.SerializeToString,
            guidance__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
